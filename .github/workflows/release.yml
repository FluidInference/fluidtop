name: 🚀 Release to PyPI

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., 0.2.0)"
        required: true
        type: string
      create_github_release:
        description: "Create GitHub release"
        required: true
        default: true
        type: boolean

jobs:
  release:
    runs-on: macos-latest
    environment: release
    permissions:
      contents: write
      id-token: write # For PyPI trusted publishing

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: ⚡ Install UV
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: 📝 Update version in pyproject.toml
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "Updating version to $VERSION"
          sed -i '' "s/version = \".*\"/version = \"$VERSION\"/" pyproject.toml

          # Verify the version was updated
          grep "version = \"$VERSION\"" pyproject.toml || exit 1
          echo "✅ Version updated successfully"

      - name: 🧹 Clean previous builds
        run: |
          rm -rf dist/
          rm -rf build/
          rm -rf *.egg-info/
          echo "✅ Cleaned previous builds"

      - name: 🔨 Build package
        run: |
          uv build
          echo "✅ Package built successfully"

          # List build artifacts
          echo "📦 Build artifacts:"
          ls -la dist/

      - name: 🧪 Test build
        run: |
          echo "🧪 Testing package build..."

          # Test that the package can be imported and help works
          sudo uv run fluidtop --help

          # Verify the version in the built package
          VERSION="${{ github.event.inputs.version }}"
          if ls dist/fluid_top-${VERSION}-*.whl 1> /dev/null 2>&1; then
            echo "✅ Wheel file with correct version found"
          else
            echo "❌ Wheel file with version $VERSION not found"
            ls dist/
            exit 1
          fi

          if ls dist/fluid_top-${VERSION}.tar.gz 1> /dev/null 2>&1; then
            echo "✅ Source distribution with correct version found"
          else
            echo "❌ Source distribution with version $VERSION not found"  
            ls dist/
            exit 1
          fi

      - name: 🏷️ Create and push git tag
        run: |
          VERSION="${{ github.event.inputs.version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Commit version change
          git add pyproject.toml
          git commit -m "🔖 Bump version to $VERSION"

          # Create and push tag
          git tag "v$VERSION"
          git push origin main
          git push origin "v$VERSION"
          echo "✅ Git tag v$VERSION created and pushed"

      - name: 📦 Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true
          verbose: true

      - name: ✅ Verify PyPI publication
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "⏳ Waiting for PyPI to update..."
          sleep 30

          # Check if package is available on PyPI
          for i in {1..10}; do
            if pip index versions fluid-top | grep -q "$VERSION"; then
              echo "✅ Package version $VERSION found on PyPI"
              break
            else
              echo "⏳ Attempt $i: Package not yet available, waiting..."
              sleep 30
            fi
            
            if [ $i -eq 10 ]; then
              echo "❌ Package not found on PyPI after 5 minutes"
              exit 1
            fi
          done

      - name: 🧪 Test PyPI installation
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "🧪 Testing installation from PyPI..."

          # Create a fresh virtual environment and test installation
          python -m venv test_env
          source test_env/bin/activate

          # Install from PyPI
          pip install "fluid-top==$VERSION"

          # Test that it works
          echo "Testing fluidtop --help (without sudo in CI)"
          python -c "import fluidtop.fluidtop as ft; print('✅ Package imports successfully')"

          # Clean up
          deactivate
          rm -rf test_env
          echo "✅ PyPI installation test passed"

      - name: 📋 Generate release notes
        run: |
          VERSION="${{ github.event.inputs.version }}"
          cat > release_notes.md << EOF
          # FluidTop v$VERSION

          ## 🚀 What's New

          This release includes improvements and updates to FluidTop.

          ## 📦 Installation

          \`\`\`bash
          # Install or upgrade via pip
          pip install fluid-top --upgrade

          # Install or upgrade via UV  
          uv add fluid-top

          # Run directly with UV
          sudo uv run fluidtop
          \`\`\`

          ## 🔧 System Requirements

          - **Hardware:** Apple Silicon Mac (M1, M2, M3, M4+)
          - **OS:** macOS Monterey (12.0) or later
          - **Python:** 3.8+ (automatically managed with UV)
          - **Privileges:** Root access required for powermetrics

          ## 🏷️ Package Information

          - **PyPI:** https://pypi.org/project/fluid-top/$VERSION/
          - **Wheel:** \`fluid_top-$VERSION-py3-none-any.whl\`
          - **Source:** \`fluid_top-$VERSION.tar.gz\`

          ---

          **Full Changelog:** https://github.com/FluidInference/fluidtop/compare/v$(git describe --tags --abbrev=0 HEAD~1)...v$VERSION
          EOF

      - name: 🎉 Create GitHub Release
        if: ${{ github.event.inputs.create_github_release == 'true' }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: "FluidTop v${{ github.event.inputs.version }}"
          body_path: release_notes.md
          files: |
            dist/*.whl
            dist/*.tar.gz
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🎊 Release Summary
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "## 🎉 Release v$VERSION Complete! " >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Completed Tasks" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Updated version in pyproject.toml" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Built distribution packages" >> $GITHUB_STEP_SUMMARY  
          echo "- [x] Tested package build" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Created and pushed git tag v$VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Published to PyPI" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Verified PyPI publication" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Tested PyPI installation" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Created GitHub release" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
          echo "- **PyPI Package:** https://pypi.org/project/fluid-top/$VERSION/" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Release:** https://github.com/FluidInference/fluidtop/releases/tag/v$VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **Install Command:** \`pip install fluid-top==$VERSION\`" >> $GITHUB_STEP_SUMMARY
