name: üöÄ Release to PyPI

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: "Type of version bump"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      create_github_release:
        description: "Create GitHub release"
        required: true
        default: true
        type: boolean

jobs:
  release:
    runs-on: ubuntu-latest
    environment: release
    permissions:
      contents: write
      id-token: write # For PyPI trusted publishing

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: ‚ö° Install UV
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: üìù Calculate and update version in pyproject.toml
        run: |
          BUMP_TYPE="${{ github.event.inputs.bump_type }}"
          echo "Bump type: $BUMP_TYPE"

          # Get current version from pyproject.toml
          CURRENT_VERSION=$(grep "version = \".*\"" pyproject.toml | sed -n 's/version = "\(.*\)"/\1/p')
          echo "Current version: $CURRENT_VERSION"

          # Split version into components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

          # Calculate new version based on bump type
          case $BUMP_TYPE in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
            *)
              echo "‚ùå Invalid bump type: $BUMP_TYPE"
              exit 1
              ;;
          esac

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"

          # Update version in pyproject.toml
          sed -i "s/version = \".*\"/version = \"$NEW_VERSION\"/" pyproject.toml

          # Verify the version was updated
          grep "version = \"$NEW_VERSION\"" pyproject.toml || exit 1
          echo "‚úÖ Version updated from $CURRENT_VERSION to $NEW_VERSION"

          # Set as environment variable for subsequent steps
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: üßπ Clean previous builds
        run: |
          rm -rf dist/
          rm -rf build/
          rm -rf *.egg-info/
          echo "‚úÖ Cleaned previous builds"

      - name: üî® Build package
        run: |
          uv build
          echo "‚úÖ Package built successfully"

          # List build artifacts
          echo "üì¶ Build artifacts:"
          ls -la dist/

      - name: üß™ Test build
        run: |
          echo "üß™ Testing package build..."

          # Test that the package can be imported and help works
          sudo uv run fluidtop --help

          # Verify the version in the built package
          if ls dist/fluid_top-${NEW_VERSION}-*.whl 1> /dev/null 2>&1; then
            echo "‚úÖ Wheel file with correct version found"
          else
            echo "‚ùå Wheel file with version $NEW_VERSION not found"
            ls dist/
            exit 1
          fi

          if ls dist/fluid_top-${NEW_VERSION}.tar.gz 1> /dev/null 2>&1; then
            echo "‚úÖ Source distribution with correct version found"
          else
            echo "‚ùå Source distribution with version $NEW_VERSION not found"  
            ls dist/
            exit 1
          fi

      - name: üè∑Ô∏è Create and push git tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Commit version change
          git add pyproject.toml
          git commit -m "üîñ Bump version to $NEW_VERSION"

          # Create and push tag
          git tag "v$NEW_VERSION"
          git push origin main
          git push origin "v$NEW_VERSION"
          echo "‚úÖ Git tag v$NEW_VERSION created and pushed"

      - name: üì¶ Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true
          verbose: true

      - name: ‚úÖ Verify PyPI publication
        run: |
          echo "‚è≥ Waiting for PyPI to update..."
          sleep 30

          # Check if package is available on PyPI
          for i in {1..10}; do
            if pip index versions fluid-top | grep -q "$NEW_VERSION"; then
              echo "‚úÖ Package version $NEW_VERSION found on PyPI"
              break
            else
              echo "‚è≥ Attempt $i: Package not yet available, waiting..."
              sleep 30
            fi
            
            if [ $i -eq 10 ]; then
              echo "‚ùå Package not found on PyPI after 5 minutes"
              exit 1
            fi
          done

      - name: üß™ Test PyPI installation
        run: |
          echo "üß™ Testing installation from PyPI..."

          # Create a fresh virtual environment and test installation
          python -m venv test_env
          source test_env/bin/activate

          # Install from PyPI
          pip install "fluid-top==$NEW_VERSION"

          # Test that it works
          echo "Testing fluidtop --help (without sudo in CI)"
          python -c "import fluidtop.fluidtop as ft; print('‚úÖ Package imports successfully')"

          # Clean up
          deactivate
          rm -rf test_env
          echo "‚úÖ PyPI installation test passed"

      - name: üìã Generate release notes
        run: |
          cat > release_notes.md << EOF
          # FluidTop v$NEW_VERSION

          ## üöÄ What's New

          This release includes improvements and updates to FluidTop.

          ## üì¶ Installation

          \`\`\`bash
          # Install or upgrade via pip
          pip install fluid-top --upgrade

          # Install or upgrade via UV  
          uv add fluid-top

          # Run directly with UV (on macOS, use sudo)
          sudo uv run fluidtop
          \`\`\`

          ## üîß System Requirements

          - **Hardware:** Apple Silicon Mac (M1, M2, M3, M4+)
          - **OS:** macOS Monterey (12.0) or later
          - **Python:** 3.8+ (automatically managed with UV)
          - **Privileges:** Root access required for powermetrics

          ## üè∑Ô∏è Package Information

          - **PyPI:** https://pypi.org/project/fluid-top/$NEW_VERSION/
          - **Wheel:** \`fluid_top-$NEW_VERSION-py3-none-any.whl\`
          - **Source:** \`fluid_top-$NEW_VERSION.tar.gz\`

          ---

          **Full Changelog:** https://github.com/FluidInference/fluidtop/compare/v$(git describe --tags --abbrev=0 HEAD~1)...v$NEW_VERSION
          EOF

      - name: üéâ Create GitHub Release
        if: ${{ github.event.inputs.create_github_release == 'true' }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.NEW_VERSION }}
          name: "FluidTop v${{ env.NEW_VERSION }}"
          body_path: release_notes.md
          files: |
            dist/*.whl
            dist/*.tar.gz
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üéä Release Summary
        run: |
          echo "## üéâ Release v$NEW_VERSION Complete! " >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚úÖ Completed Tasks" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Calculated new version ($NEW_VERSION) from ${{ github.event.inputs.bump_type }} bump" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Updated version in pyproject.toml" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Built distribution packages" >> $GITHUB_STEP_SUMMARY  
          echo "- [x] Tested package build" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Created and pushed git tag v$NEW_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Published to PyPI" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Verified PyPI publication" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Tested PyPI installation" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Created GitHub release" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó Links" >> $GITHUB_STEP_SUMMARY
          echo "- **PyPI Package:** https://pypi.org/project/fluid-top/$NEW_VERSION/" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Release:** https://github.com/FluidInference/fluidtop/releases/tag/v$NEW_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **Install Command:** \`pip install fluid-top==$NEW_VERSION\`" >> $GITHUB_STEP_SUMMARY
